#!/usr/bin/env python3

"""
build cime component model library.   This buildlib script is used by all CDEPS components.
"""

import sys, os, time

_CIMEROOT = os.environ.get("CIMEROOT")
if _CIMEROOT is None:
    raise SystemExit("ERROR: must set CIMEROOT environment variable")
sys.path.append(os.path.join(_CIMEROOT, "CIME", "Tools"))

_LIBDIR = os.path.join(_CIMEROOT, "scripts", "lib")
sys.path.append(_LIBDIR)

from standard_script_setup import *
from CIME.case import Case
from CIME.utils import run_cmd, symlink_force, expect
from CIME.build import get_standard_cmake_args

logger = logging.getLogger(__name__)

def parse_command_line(args, description):
###############################################################################
    parser = argparse.ArgumentParser(
        usage="""\n{0} [--debug]
OR
{0} --verbose
OR
{0} --help

\033[1mEXAMPLES:\033[0m
    \033[1;32m# Run \033[0m
    > {0}
""" .format (os.path.basename(args[0])),

description=description,

formatter_class=argparse.ArgumentDefaultsHelpFormatter
)

    CIME.utils.setup_standard_logging_options(parser)

    parser.add_argument("buildroot",
                        help="build path root")

    parser.add_argument("installpath",
                        help="install path ")

    parser.add_argument("caseroot", nargs="?", default=os.getcwd(),
                        help="Case directory to build")

    args = CIME.utils.parse_args_and_handle_standard_logging_options(args, parser)

    return args.buildroot, args.installpath, args.caseroot


def buildlib(bldroot, libroot, case):
    expect(not bldroot.endswith("obj"),
           "It appears that the main CDEPS buildlib is being called for a specific component\n"
           "(specific data model components should use buildlib_comps)")

    if case.get_value("DEBUG"):
        strdebug = "debug"
    else:
        strdebug = "nodebug"
    if case.get_value("BUILD_THREADED"):
        strthread = "threads"
    else:
        strthread = "nothreads"
    mpilib = case.get_value("MPILIB")

    sharedpath = os.path.join(case.get_value("COMPILER"),mpilib,
                              strdebug, strthread, "nuopc")

    logger.info("Running cmake for CDEPS")
    srcpath = os.path.abspath(os.path.join(os.path.dirname(__file__),os.pardir))
    cmake_flags = get_standard_cmake_args(case, os.path.join(sharedpath,"cdeps"), shared_lib=True)
    # base path of install to be completed by setting DESTDIR in make install
    cmake_flags += " -DCMAKE_INSTALL_PREFIX:PATH=/"
    cmake_flags += " -DLIBROOT={} ".format(libroot)
    cmake_flags += " -DMPILIB={} ".format(mpilib)
    cmake_flags += " -DSRCROOT={} ".format(case.get_value("SRCROOT"))
    if os.environ["PIO_LIBDIR"]:
        cmake_flags += " -DPIO_C_LIBRARY={libdir} -DPIO_C_INCLUDE_DIR={incdir} ".format(libdir=os.environ["PIO_LIBDIR"], incdir=os.environ["PIO_INCDIR"])
        cmake_flags += " -DPIO_Fortran_LIBRARY={libdir} -DPIO_Fortran_INCLUDE_DIR={incdir} ".format(libdir=os.environ["PIO_LIBDIR"], incdir=os.environ["PIO_INCDIR"])
    else:
        cmake_flags += " -DPIO_C_LIBRARY={path}/lib -DPIO_C_INCLUDE_DIR={path}/include ".format(path=os.path.join(case.get_value("EXEROOT"),sharedpath))
        cmake_flags += " -DPIO_Fortran_LIBRARY={path}/lib -DPIO_Fortran_INCLUDE_DIR={path}/include ".format(path=os.path.join(case.get_value("EXEROOT"),sharedpath))
    cmake_flags += srcpath
    all_src_files = list(all_files_under(srcpath, ignoredirs=[".git","cmake","test",".github","cime_config","fox"]))
    # Search SourceMods path for CDEPS files. We only look in the data component directories for these, files in cdeps share
    # directories should be added to one of the data component directories
    srcmodsdir = os.path.join(case.get_value("CASEROOT"),"SourceMods")
    all_files_in_srcmods = []
    for comp_class in case.get_values("COMP_CLASSES"):
        if comp_class == "CPL":
            continue
        comp = case.get_value("COMP_{}".format(comp_class))
        cdeps_comp_name = "d"+comp_class.lower()
        if comp == cdeps_comp_name:
            all_files_in_srcmods.extend(list(all_files_under(os.path.join(srcmodsdir,"src."+cdeps_comp_name))))

    basenames1 = [os.path.basename(f) for f in all_src_files]
    basenames2 = [os.path.basename(f) for f in all_files_in_srcmods]
    srcmods = list(set(basenames1).intersection(set(basenames2)))
    if srcmods:
        logger.info("Found SourceMods {}".format(srcmods))
        for i, v in enumerate(all_src_files):
            for sfile in all_files_in_srcmods:
                if os.path.basename(sfile) == os.path.basename(v):
                    all_src_files[i] = v.replace(os.path.dirname(v), os.path.dirname(sfile))
    logger.debug("all_src_files: {}".format(all_src_files))
    latest_src_file = max(all_src_files, key=os.path.getmtime)

    src_time = os.path.getmtime(latest_src_file)
    if os.path.exists(os.path.join(bldroot,"CMakeFiles")):
        bld_time = os.path.getmtime(os.path.join(bldroot,"CMakeFiles"))
    else:
        bld_time = src_time - 1

    # if any file in src is newer than CmakeFiles in the build directory, rerun cmake

    if src_time > bld_time:
        logger.info("cmake_flags {}".format(cmake_flags))
        s,o,e = run_cmd("cmake {} ".format(cmake_flags), from_dir=bldroot, verbose=True)
        expect(not s,"ERROR from cmake output={}, error={}".format(o,e))
    else:
        # The dwav_lib is the last file built in cdeps, wait for it to be built
        dwav_lib = os.path.join(bldroot,"dwav","libdwav.a")
        time_to_wait = 300
        time_counter = 0
        while not os.path.exists(dwav_lib):
            time.sleep(1)
            time_counter += 1
            if time_counter > time_to_wait:
                break
        expect(time_counter <= time_to_wait," Timeout waiting for {}".format(dwav_lib))

    s,o,e = run_cmd("make install VERBOSE=1 DESTDIR={}".format(libroot), from_dir=bldroot, verbose=True)
    expect(not s,"ERROR from make output={}, error={}".format(o,e))

    # Link the CDEPS component directories to the location expected by cime
    for comp in ("atm", "lnd", "ice", "ocn", "rof", "wav"):
        compname = case.get_value("COMP_{}".format(comp.upper()))
        comppath = os.path.join(case.get_value("EXEROOT"),comp,"obj")
        if compname == "d"+comp:
            if not os.path.islink(comppath):
                os.rmdir(comppath)
            symlink_force(os.path.join(bldroot,compname), comppath)

def all_files_under(path, ignoredirs=[]):
    """Iterates through all files that are under the given path."""
    for cur_path, dirnames, filenames in os.walk(path, topdown=True):
        [dirnames.remove(d) for d in list(dirnames) if d in ignoredirs]
        for filename in filenames:
            yield os.path.join(cur_path, filename)

def _main_func(args):
    bldroot, installpath, caseroot = parse_command_line(args, __doc__)
    with Case(caseroot) as case:
        buildlib(bldroot, installpath, case)

if __name__ == "__main__":
    _main_func(sys.argv)
